definitions:
  api.CreatePostPayLoad:
    properties:
      content:
        maxLength: 200
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  api.CreateTokenPayLoad:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 70
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  api.RegisterPayLoad:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 70
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.UpdatePostPayLoad:
    properties:
      content:
        maxLength: 200
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  storage.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/storage.User'
      user_id:
        type: integer
    type: object
  storage.Post:
    properties:
      comment:
        items:
          $ref: '#/definitions/storage.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/storage.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  storage.PostForFeed:
    properties:
      comment_count:
        type: integer
      post:
        $ref: '#/definitions/storage.Post'
    type: object
  storage.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Project from Tiego`s Go Backend Course
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Social Documentation
paths:
  /authentication/register:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/api.RegisterPayLoad'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/api.CreateTokenPayLoad'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a post
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/api.CreatePostPayLoad'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/storage.Post'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Fetches a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Post'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Updates a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/api.UpdatePostPayLoad'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.Post'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches the User info using ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/storage.User'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the User
      tags:
      - user
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Gets the id of User and the id of User to follow
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: User Followed
          schema:
            type: string
        "409":
          description: Cannot Follow That User
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follow The User
      tags:
      - user
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: User Followed
          schema:
            type: string
        "409":
          description: Cannot Follow That User
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - user
  /users/activate/{token}:
    put:
      description: Activates the user using token from invitation
      parameters:
      - description: token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: User Activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates the user using token from invitation
      tags:
      - auth
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches the user feed
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Tags
        in: query
        name: tags
        type: string
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/storage.PostForFeed'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the user feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    description: dummy dum
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
